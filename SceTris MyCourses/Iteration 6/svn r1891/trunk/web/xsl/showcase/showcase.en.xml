<lang>
	<showcase_formBuilder>
		<title>Showcase: Form Builder</title>
		<heading>Form Builder</heading>
		<description>
			This shows how to intermix custom content into a form. The mainly
			interesting stuff is inside the XSL file. Have a look at it.
		</description>
	</showcase_formBuilder>
	
	<showcase_formControls>
		<title>Showcase: Form Controls</title>
		<heading>Form Controls</heading>
		<description>
			This does only show the various Form Controls which are available.
			Have a look at the Java source file as well as the XSL template
			too see how they were created.
		</description>
	</showcase_formControls>
	
	<showcase_formValidation>
		<title>Showcase: Form Validation</title>
		<heading>Form Validation</heading>
		<description>
			This demos form validation. The email address is only accepted if it is a
			well-formed email address and if the host-portion is fu-berlin.de (which is)
			case insensitive). Have a look at the Java source file.
		</description>
	</showcase_formValidation>
	
	<showcase_advancedFormValidation>
		<title>Showcase: Advanced Form Validation</title>
		<heading>Advanced Form Validation</heading>
		<description>
			This demos form validation. It looks and acts exactly like the Form Validation demo.
			However, it uses @ActiveValidator instead of @Validator, which allows for referencing
			a “living” Validator instead of a Validator class. Have a look at the Java source file.
		</description>
	</showcase_advancedFormValidation>
	
	<showcase_formCommitException>
		<title>Showcase: Form Commit Exception</title>
		<heading>Exception On Commit</heading>
		<description>
			This demo is basically the same es Form Validation, except for that if will
			fail on commit and show an appropriate error message. The demo also shows
			how to extend a form. Have a look at the Java source file.
		</description>
	</showcase_formCommitException>
	
	<showcase_formMultipleOptions>
		<title>Showcase: Form with Multiple Options</title>
		<heading>Form with Multiple Options</heading>
		<description>- desc -</description>
	</showcase_formMultipleOptions>
	
	<showcase_multipleForms>
		<title>Showcase: Multiple Forms</title>
		<heading>Multiple Forms</heading>
	</showcase_multipleForms>
	
	<showcase_extendedForm>
		<title>Showcase: Extended Form</title>
		<heading>Extended Form</heading>
	</showcase_extendedForm>
	
	<showcase_acgtForms>
		<title>Showcase: Advanced Code Generation Techniques</title>
		<heading>ACGT Forms</heading>
	</showcase_acgtForms>
	
	<showcase_formReuse>
		<title>Showcase: “Reusable” Forms</title>
		<heading>“Reusable” Forms</heading>
		<description>
			This showcase demonstrates how a form can be reused immediately after committing.
			Have a look at both the Java source files as well as the XSL template. Especially
			the Java source is intersting, since it uses session functionality.
		</description>
	</showcase_formReuse>

	<new-user>Create new user account</new-user>
	<basic-info>Personal information</basic-info>
	<credentials>Login information</credentials>
	<misc>Miscellaneous</misc>

	<labels>
		<szimpla.firstName>First name</szimpla.firstName>
		<szimpla.lastName>Last name</szimpla.lastName>
		<szimpla.loginName>Login name</szimpla.loginName>
		<szimpla.pw>Password</szimpla.pw>
		<szimpla.mail>E-Mail-Address</szimpla.mail>
		<szimpla.numeric>A number</szimpla.numeric>
		
		<szimpla.string>String</szimpla.string>
		
		<szimpla.title>Title</szimpla.title>
		<szimpla.subtitle>Subtitle</szimpla.subtitle>
		<szimpla.description>Description</szimpla.description>
		
		<szimpla.button.submit>Create new user</szimpla.button.submit>
		
		<builder.button.submit>Create new user</builder.button.submit>
		<builder.firstName>First name</builder.firstName>
		<builder.middleName>Middle name</builder.middleName>
		<builder.lastName>Last name</builder.lastName>
		<builder.mail>Email address</builder.mail>
		
		<builder.loginName>Login name</builder.loginName>
		<builder.pw>Password</builder.pw>
		<builder.description>Notes</builder.description>
		
		<newsletter.mail>Your email address</newsletter.mail>
		<newsletter.button.submit>Subscribe now</newsletter.button.submit>
		
		<reuse.title>Title</reuse.title>
		<reuse.content>Content (≥ 15)</reuse.content>
		<reuse.button.submit>Create page</reuse.button.submit>
	</labels>
	
	<info>
		<builder.firstName>This is a required field.</builder.firstName>
		<builder.lastName>This is a required field.</builder.lastName>
		<builder.middleName>This is optional.</builder.middleName>
		<builder.mail>
			You mail address. This is optional. However,
			if you supply one it must be a valid one.
		</builder.mail>
		<builder.loginName>
			Your id used for login. Only lowercase letters are allowed
			ant it must feature between 3 and 8 of them.
		</builder.loginName>
		<builder.pw>
			Choose what you like, but choose something.
		</builder.pw>
	
		<reuse.title>Plz provide a title.</reuse.title>
	
		<newsletter.mail>Please note, that only email addresses @fu-berlin.de are accepted.</newsletter.mail>
	</info>
	
	<error-syntax>
		<newsletter.mail>This is not a valid email address!</newsletter.mail>
		
		<builder.mail>Please provide a corret email address or none at all!</builder.mail>
		<builder.loginName>Only a-z, between 3 and 8 letters!</builder.loginName>
	</error-syntax>
	
	<error-invalid>
		<newsletter.mail>
			<invalidSuffix>The email address must be one @fu-berlin.de</invalidSuffix>
		</newsletter.mail>
	</error-invalid>
	
	<error-missing>
		<builder.firstName>You need to supply the first name of the user!</builder.firstName>
		<builder.lastName>You need to supply the last name of the user!</builder.lastName>
		<builder.loginName>You need to supply a login name!</builder.loginName>
	</error-missing>
	
	<reuse.success>Successfully created page!</reuse.success>
	<builder.success>Success, success, success!</builder.success>
	
	<newsletter.success>Successfully inserted email address into newsletter.</newsletter.success>
	<newsletter.failure>My apologies, I couldn’t handle that.</newsletter.failure>
</lang>